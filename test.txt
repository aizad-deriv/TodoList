import { useLocalStore } from 'mobx-react'

const todoStore = useLocalStore(() => ({
  todos: [{id: nanoid, task:"Test", complete: false}]
}))

// Functional React

import React,{useState} from 'react'
import { nanoid } from 'nanoid'
import { useLocalObservable, observer, inject } from 'mobx-react'
import { toJS } from 'mobx'

const App = ({TodoStore}) => {
  const [todoItem,setTodoItem] = useState('');

  console.log(toJS(TodoStore.todoList));

  export todoItems = useLocalObservable(() => ({
    todo: [{
      id: nanoid,
      item: 'Test',
      done: false,
      addTodo: prevTodo => [...prevTodo,{
        id:nanoid,
        task:todoItem,
        done:false
      }]
    }
  ]
  }))

  return (
    <div>
      <h1>Todo List</h1>
      <form onSubmit={e => {
        todoItems.todo.addTodo(todoItem)
        setTodoItem("")
        e.preventDefault()
        }}>
        <input value={todoItem} onChange={e => setTodoItem(e.target.value)}/>
        <button type='submit'>Add</button>
      </form>
      <ul>{todoItems.todo.map(todo => <li key={todo.id}>{todo.item}</li>)}
      </ul>
    </div>
  )
}

export default inject('TodoStore')(observer(App))

// Class 
import { decorate, observable, action } from 'mobx';
class Store {
  // observable
  input = '';
  todos = [
    {
      task: 'Test',
      complete: false,
    },
  ];

  // action
  addTodos(task) {
    this.todos.push({
      task: this.input,
      complete: false,
    });
  }

  setInput = (e) => (this.input = e.target.value);

  setComplete = () => (this.complete = true);
}

decorate(Store, {
  todos: observable,
  input: observable,
  complete: observable,
  addTodos: action.bound,
  setInput: action.bound,
  setComplete: action.bound,
});

const storeInstance = new Store();
export default storeInstance;

